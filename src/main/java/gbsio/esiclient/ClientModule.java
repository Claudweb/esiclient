package gbsio.esiclient;

import com.google.inject.PrivateModule;
import com.google.inject.name.Names;
import gbsio.esiclient.api.Client;
import gbsio.esiclient.api.config.ClientConfig;
import gbsio.esiclient.api.config.DataSource;
import gbsio.esiclient.api.etag.ETagCache;
import gbsio.esiclient.internal.client.ClientInternalsModule;
import gbsio.esiclient.internal.concurrency.ConcurrencyModule;
import gbsio.esiclient.internal.hooks.HooksModule;
import gbsio.esiclient.internal.http.HttpModule;
import gbsio.esiclient.internal.json.JsonModule;
import gbsio.esiclient.internal.response.ResponseModule;
import gbsio.esiclient.internal.scheduling.SchedulingModule;

import java.util.concurrent.Executor;

/**
 * Provides support for instantiating a {@link Client} to a dependency injection
 * container.
 * <p>
 * One of two entry points for the ESI Client. Use this class to allow an
 * {@link com.google.inject.Injector} to be able to instantiate a
 * {@link Client}.
 */
public class ClientModule extends PrivateModule {
    private final ClientConfig config;

    /**
     * @param config the config to use for the client generated by the module
     * @see ClientConfig#builder()
     */
    @SuppressWarnings("unused")
    public ClientModule(final ClientConfig config) {
        this.config = config;
    }

    @Override
    protected void configure() {
        install(new ClientInternalsModule());
        install(new ConcurrencyModule());
        install(new HttpModule());
        install(new HooksModule());
        install(new JsonModule());
        install(new SchedulingModule());
        install(new ResponseModule());

        bind(ETagCache.class).toInstance(config.getETagCache());
        bind(Executor.class).toInstance(config.getExecutor());
        bind(String.class).annotatedWith(Names.named("ESIServer")).toInstance(config.getESIServer());
        bind(DataSource.class).toInstance(config.getDataSource());
        bind(String.class).annotatedWith(Names.named("User Agent")).toInstance(config.getUserAgent());

        expose(Client.class);
    }
}
